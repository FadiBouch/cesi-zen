on:
  workflow_call:
    inputs: 
      env:
        required: true
        type: string
      branch:
        required: true
        type: string
      url:
        required: true
        type: string
    secrets:
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true

jobs:
 deploy:
    if: github.ref_name == inputs.branch
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}
      url: ${{ inputs.url }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Setup SSH key
        run: | 
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # - name: Add SSH server to known_hosts
      #   run: ssh-keyscan 44.212.98.79 >> ~/.ssh/known_hosts

      # - name: Debug SSH host resolution
      #   run: |
      #     echo "Testing SSH_HOST: ${{ secrets.SSH_HOST }}"
      #     ping -c 2 ${{ secrets.SSH_HOST }} || echo "Ping failed"
      #     nc -zv ${{ secrets.SSH_HOST }} 22 || echo "Port 22 unreachable"

      # # - name: Add SSH server to known_hosts
      # #   run: |
      # #     ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      # - name: Verbose ssh-keyscan debug
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "Trying ssh-keyscan -H -T 15 -v ${{ secrets.SSH_HOST }}"
      #     ssh-keyscan -H -T 15 -v ${{ secrets.SSH_HOST }} || echo "::warning:: ssh-keyscan failed"

      - name: SCP docker-compose.${{ inputs.env }}.yml to server
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker-compose.${{ inputs.env }}.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/${{ inputs.env }}/.

      - name: Run Tests
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin && cd ~/${{ inputs.env }} && sudo docker compose -f docker-compose.${{ inputs.env }}.yml pull && sudo docker compose -f docker-compose.${{ inputs.env }}.yml up --abort-on-container-exit api_test_runner && sudo docker compose -f docker-compose.${{ inputs.env }}.yml down"
          
      - name: Connecting to server via SSH & running docker compose
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin && cd ~/${{ inputs.env }} && sudo docker compose -f docker-compose.${{ inputs.env }}.yml pull && sudo docker compose -f docker-compose.${{ inputs.env }}.yml up -d db_${{ inputs.env }} api_${{ inputs.env }} web_${{ inputs.env }}"


